import { PrismaClient, Note } from "@prisma/client";

export class NoteConcept {
  private prisma: PrismaClient;

  constructor() {
    prisma = new PrismaClient();
  }

  async addNote(input: {
    assignment: string;
    note: string;
    author: string;
    noteType: string;
  }): Promise<{ note: Note } | { error: string }> {
    try {
      const note = await prisma.note.create({
        data: {
          // assignment: input.assignment, // TODO: Use Relationship concept to link notes to assignments
          note: input.note,
          author: input.author,
          noteType: input.noteType,
        },
      });
      return { note };
    } catch (error) {
      return { error: `Failed to add note: ${error}` };
    }
  }

  async deleteNote(input: { id: string }): Promise<{ success: boolean } | { error: string }> {
    try {
      await prisma.note.delete({ where: { id: input.id } });
      return { success: true };
    } catch (error) {
      return { error: `Failed to delete note: ${error}` };
    }
  }

  async _getByAssignment(input: { assignment: string }): Promise<Note[]> {
    // TODO: Use Relationship concept to find notes linked to assignments
    return [];
    // return await prisma.note.findMany({
    //   where: { assignment: input.assignment },
    //   orderBy: { createdAt: "desc" },
    // });
  }

  async _getByAuthor(input: { author: string }): Promise<Note[]> {
    return await prisma.note.findMany({
      where: { author: input.author },
      orderBy: { createdAt: "desc" },
    });
  }

  async _getByType(input: { noteType: string }): Promise<Note[]> {
    return await prisma.note.findMany({
      where: { noteType: input.noteType },
      orderBy: { createdAt: "desc" },
    });
  }
}


