// Prisma schema from generic concept specifications

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Better-auth required models (kept for compatibility)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

// Generic Concept Models

// User concept - Generic identity
model User {
  id              String    @id @default(cuid())
  user            String    @unique // The concept's identifier field
  email           String    @unique
  name            String
  avatar          String?
  isEmailVerified Boolean   @default(false)
  lastLoginAt     DateTime?
  isActive        Boolean   @default(true)
  isSuspended     Boolean   @default(false)
  suspendedAt     DateTime?
  suspendedReason String?
  preferences     Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Better-auth relations (kept for compatibility)
  accounts Account[]

  @@map("user")
}

// Session concept - Manages active sessions with context
model Session {
  id              String    @id @default(cuid())
  sessionKey      String    @unique
  currentContext  String?
  userAgent       String?
  ipAddress       String?
  loginMethod     String
  isActive        Boolean   @default(true)
  lastActivityAt  DateTime  @default(now())
  expiresAt       DateTime?
  preferences     Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("session")
}

// Role concept - Defines permission sets
model Role {
  id          String   @id @default(cuid())
  name        String
  displayName String
  description String
  scope       String
  permissions Json     @default("{}")
  isActive    Boolean  @default(true)
  isBuiltIn   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, scope])
  @@map("role")
}

// Membership concept - Manages associations between entities
model Membership {
  id                 String    @id @default(cuid())
  memberEntity       String
  targetEntity       String
  roleEntity         String
  isActive           Boolean   @default(false)
  joinedAt           DateTime?
  leftAt             DateTime?
  invitedBy          String?
  invitedAt          DateTime?
  approvedBy         String?
  approvedAt         DateTime?
  status             String    @default("pending")
  invitationMessage  String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([memberEntity, targetEntity])
  @@map("membership")
}

// Organization concept - Generic organizational entities
model Organization {
  id               String   @id @default(cuid())
  organization     String   @unique // The concept's identifier field
  name             String
  description      String
  domain           String   @unique
  organizationType String
  contactEmail     String
  website          String?
  parentOrganization String?
  isActive         Boolean  @default(true)
  settings         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("organization")
}

// Project concept - Generic project specifications
model Project {
  id                 String   @id @default(cuid())
  project            String   @unique // The concept's identifier field
  title              String
  description        String
  scope              String
  learningObjectives String[]
  industry           String
  domain             String
  difficulty         String
  estimatedHours     Int
  requiredSkills     String[]
  deliverables       String[]
  status             String   @default("draft")
  tags               String[]
  templateType       String?
  aiGenerated        Boolean  @default(false)
  sourceData         Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("project")
}

// Campaign concept - Generic educational campaigns
model Campaign {
  id                 String   @id @default(cuid())
  campaign           String   @unique // The concept's identifier field
  name               String
  description        String
  learningObjectives String[]
  startDate          DateTime
  endDate            DateTime?
  maxParticipants    Int?
  participantIds     String[] @default([])
  industryConstraints Json    @default("{}")
  projectConstraints Json     @default("{}")
  landingPageConfig  Json     @default("{}")
  status             String   @default("draft")
  contactEmail       String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("campaign")
}

// Expert concept - Generic domain experts
model Expert {
  id              String   @id @default(cuid())
  expert          String   @unique // The concept's identifier field
  name            String
  email           String
  bio             String?
  expertiseDomains String[]
  availability    String   @default("available")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("expert")
}

// IndustryPartner concept - Generic industry contacts
model IndustryPartner {
  id               String   @id @default(cuid())
  industryPartner  String   @unique // The concept's identifier field
  name             String
  email            String
  title            String
  focusAreas       String[]
  experienceLevel  String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("industry_partner")
}

// Team concept - Generic collaborative teams
model Team {
  id          String   @id @default(cuid())
  team        String   @unique // The concept's identifier field
  name        String
  description String?
  status      String   @default("forming")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("team")
}

// Assignment concept - Generic task assignments
model Assignment {
  id              String    @id @default(cuid())
  assignment      String    @unique // The concept's identifier field
  task            String
  assignee        String
  assigner        String?
  status          String    @default("pending")
  dueDate         DateTime?
  startDate       DateTime?
  completedDate   DateTime?
  priority        String?
  description     String?
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("assignment")
}

// ProgressNotes for Assignment concept
model ProgressNote {
  id         String   @id @default(cuid())
  assignment String
  note       String
  author     String
  noteType   String
  createdAt  DateTime @default(now())

  @@map("progress_note")
}

// Feedback for Assignment concept
model Feedback {
  id         String   @id @default(cuid())
  assignment String
  author     String
  rating     Float?
  comment    String
  createdAt  DateTime @default(now())

  @@map("feedback")
}

// API concept - Generic HTTP request/response handling
model APIRequest {
  id        String   @id @default(cuid())
  method    String
  path      String
  body      Json?
  params    Json?
  query     Json?
  headers   Json?
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("api_request")
}

model APIResponse {
  id         String   @id @default(cuid())
  requestId  String
  statusCode Int
  body       Json?
  headers    Json?
  error      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("api_response")
}