concept Assignment

purpose
  manage project assignments and applications between students, industry partners, and projects

state
  Assignment
    id: ObjectId
    projectId: ObjectId
    campaignId: ObjectId
    type: "direct_assignment" | "application" | "recommendation"
    
    # Assignment target (can be individual student or team)
    teamId: ObjectId? // for team assignments
    studentId: ObjectId? // for individual assignments
    studentName: String?
    studentEmail: String?
    
    # Industry partner information (for industry partner selections)
    industryPartnerId: ObjectId?
    
    status: "pending" | "accepted" | "rejected" | "in_progress" | "completed" | "withdrawn"
    
    # Application details
    applicationText: String? // student's application message
    motivationStatement: String?
    relevantSkills: [String]?
    
    # Assignment details
    assignedBy: ObjectId? // education partner who made the assignment
    assignedAt: Date?
    
    # Progress tracking
    startDate: Date?
    endDate: Date?
    progressNotes: [Object]? // {date, note, author}
    deliverableSubmissions: [Object]? // {deliverable, submittedAt, fileUrl}
    
    # Feedback
    studentFeedback: String?
    partnerFeedback: String?
    expertFeedback: String?
    finalGrade: String?
    
    createdAt: Date
    updatedAt: Date

actions
  createDirectAssignment(projectId: ObjectId, campaignId: ObjectId, studentId: ObjectId?, teamId: ObjectId?, studentName: String?, studentEmail: String?, assignedBy: ObjectId) -> Assignment | {error}
    - create direct assignment of project to student or team
    - validate project, campaign, and assigner exist
    - validate either studentId or teamId is provided (not both)
    - set type to "direct_assignment", status to "accepted"
    - return assignment with generated id and timestamps

  createApplication(projectId: ObjectId, campaignId: ObjectId, studentId: ObjectId, studentName: String, studentEmail: String, applicationText: String, motivationStatement: String?, relevantSkills: [String]?) -> Assignment | {error}
    - create student application for project
    - validate project and campaign exist
    - set type to "application", status to "pending"
    - return assignment with generated id and timestamps

  createRecommendation(projectId: ObjectId, campaignId: ObjectId, industryPartnerId: ObjectId) -> Assignment | {error}
    - create recommendation for industry partner
    - validate project, campaign, and partner exist
    - set type to "recommendation", status to "pending"
    - return assignment with generated id and timestamps

  updateStatus(id: ObjectId, status: String, updatedBy: ObjectId?) -> Assignment | {error}
    - update assignment status
    - set assignedAt if status changes to "accepted"
    - return updated assignment

  addProgressNote(id: ObjectId, note: String, author: ObjectId) -> Assignment | {error}
    - add progress note to assignment
    - return updated assignment

  submitDeliverable(id: ObjectId, deliverable: String, fileUrl: String) -> Assignment | {error}
    - add deliverable submission
    - return updated assignment

  addFeedback(id: ObjectId, feedbackType: String, feedback: String, grade: String?) -> Assignment | {error}
    - add feedback (student, partner, or expert)
    - set final grade if provided
    - return updated assignment

  withdraw(id: ObjectId) -> Assignment | {error}
    - withdraw application or assignment
    - set status to "withdrawn"
    - return updated assignment

  delete(id: ObjectId) -> {success: Boolean} | {error}
    - delete assignment if status is "pending" or "withdrawn"
    - return success status

queries
  _getById(id: ObjectId) -> [Assignment]
    - return assignment by id

  _getByProject(projectId: ObjectId) -> [Assignment]
    - return assignments for project

  _getByCampaign(campaignId: ObjectId) -> [Assignment]
    - return assignments for campaign

  _getByStudent(studentId: ObjectId) -> [Assignment]
    - return assignments for student

  _getByTeam(teamId: ObjectId) -> [Assignment]
    - return assignments for team

  _getByIndustryPartner(industryPartnerId: ObjectId) -> [Assignment]
    - return assignments for industry partner

  _getByStatus(status: String) -> [Assignment]
    - return assignments with specified status

  _getPendingApplications(campaignId: ObjectId) -> [Assignment]
    - return pending applications for campaign

  _getActiveAssignments() -> [Assignment]
    - return assignments with "in_progress" status

  _getCompletedAssignments(campaignId: ObjectId?) -> [Assignment]
    - return completed assignments, optionally filtered by campaign

operational principle
  Assignments manage the lifecycle of project engagement, from initial application or assignment through completion. Students can apply for projects or be directly assigned by education partners. Industry partners receive recommendations and can select preferred students. The system tracks progress, deliverable submissions, and feedback from all stakeholders throughout the assignment lifecycle.
