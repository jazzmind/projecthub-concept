concept Session

purpose
  manage active sessions with context and preferences

state
  a set of Sessions with
    a sessionKey String
    an optional currentContext String
    an optional userAgent String
    an optional ipAddress String
    a loginMethod String
    an isActive Flag
    a lastActivityAt Date
    an optional expiresAt Date
    an optional preferences Object
    a createdAt Date
    an updatedAt Date

actions
  create(sessionKey: String, userAgent: String?, ipAddress: String?, loginMethod: String) -> Session | {error}
    - create new session with unique key
    - validate sessionKey uniqueness
    - set isActive=true, lastActivityAt=now
    - return session with generated id and timestamps

  setContext(sessionKey: String, context: String) -> Session | {error}
    - set current active context for this session
    - return updated session

  clearContext(sessionKey: String) -> Session | {error}
    - clear current context
    - return updated session

  updateActivity(sessionKey: String) -> Session | {error}
    - update last activity timestamp
    - extend session if needed
    - return updated session

  updatePreferences(sessionKey: String, preferences: Object) -> Session | {error}
    - update session preferences
    - return updated session

  expire(sessionKey: String) -> Session | {error}
    - expire session
    - set isActive=false
    - return updated session

  delete(sessionKey: String) -> {success: Boolean} | {error}
    - delete session
    - return success status

queries
  _getBySessionKey(sessionKey: String) -> [Session]
    - return session by session key

  _getActive(sessionKey: String) -> [Session]
    - return active session for session key

  _getCurrentContext(sessionKey: String) -> [String]
    - return current context for session

  _isActiveSession(sessionKey: String) -> [Boolean]
    - check if session is active and not expired

  _getExpiredSessions() -> [Session]
    - return expired sessions for cleanup

operational principle
  Sessions provide stateful context with generic string-based identifiers. After create(sessionKey: "s1", loginMethod: "email") and setContext(sessionKey: "s1", context: "org123"), then _getCurrentContext(sessionKey: "s1") returns "org123".

</concept_spec>