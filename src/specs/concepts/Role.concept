concept Role

purpose
  define named permission sets for access control systems

state
  a set of Roles with
    a name String
    a displayName String
    a description String
    a scope String
    an isActive Flag
    an isBuiltIn Flag
    a createdAt Date
    an updatedAt Date

  a set of Permissions with
    
actions
  create(name: String, displayName: String, description: String, scope: String, permissions: Object) -> Role | {error}
    - create a new role
    - validate name uniqueness within scope
    - set isActive=true, isBuiltIn=false
    - return role with generated id and timestamps

  update(name: String, displayName: String?, description: String?, permissions: Object?) -> Role | {error}
    - update existing role
    - cannot update if isBuiltIn=true
    - return updated role

  activate(name: String) -> Role | {error}
    - set role as active
    - return updated role

  deactivate(name: String) -> Role | {error}
    - set role as inactive
    - cannot deactivate if isBuiltIn=true
    - return updated role

  delete(name: String) -> {success: Boolean} | {error}
    - delete role if not built-in
    - return success status

queries
  _getByName(name: String) -> [Role]
    - return role by name

  _getByScope(scope: String) -> [Role]
    - return roles for scope

  _getActive() -> [Role]
    - return active roles

  _getBuiltIn() -> [Role]
    - return built-in roles

  _hasPermission(name: String, resource: String, action: String) -> [Boolean]
    - check if role has specific permission

operational principle
  Roles define named sets of permissions that can be assigned to entities. After create(name: "admin", scope: "platform", permissions: {users: {read: true, write: true}}) and _hasPermission(name: "admin", resource: "users", action: "read"), the result is true.

</concept_spec>