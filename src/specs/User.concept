concept User

purpose
  manage platform users with role-based access across organizations

state
  User
    id: ObjectId
    email: String
    name: String
    avatar: String?
    isEmailVerified: Flag
    lastLoginAt: Date?
    
    # Organization associations
    organizationMemberships: [Object] # {organizationId: ObjectId, role: String, isActive: Flag, joinedAt: Date}
    currentOrganizationId: ObjectId?
    
    # Platform-level role
    platformRole: "admin" | "user"
    
    # Account management
    isActive: Flag
    isSuspended: Flag
    suspendedAt: Date?
    suspendedReason: String?
    
    # Preferences
    preferences: Object? # {theme: String, notifications: Object, timezone: String}
    
    createdAt: Date
    updatedAt: Date

actions
  create(email: String, name: String) -> User | {error}
    - create a new user account
    - validate email format and uniqueness
    - set default values: isEmailVerified=false, isActive=true, platformRole="user"
    - return user with generated id and timestamps

  verifyEmail(id: ObjectId) -> User | {error}
    - mark user's email as verified
    - return updated user

  updateProfile(id: ObjectId, name: String?, avatar: String?) -> User | {error}
    - update user's profile information
    - return updated user

  addOrganizationMembership(id: ObjectId, organizationId: ObjectId, role: String) -> User | {error}
    - add user to an organization with specified role
    - validate organization exists
    - validate role is valid: "admin", "educator", "expert", "industry_partner", "learner"
    - check if membership already exists
    - return updated user

  updateOrganizationRole(id: ObjectId, organizationId: ObjectId, role: String) -> User | {error}
    - update user's role in an organization
    - validate role is valid
    - return updated user

  removeOrganizationMembership(id: ObjectId, organizationId: ObjectId) -> User | {error}
    - remove user from an organization
    - if this was currentOrganization, clear it
    - return updated user

  setCurrentOrganization(id: ObjectId, organizationId: ObjectId) -> User | {error}
    - set user's current active organization
    - validate user is member of the organization
    - return updated user

  updateLastLogin(id: ObjectId) -> User | {error}
    - update user's last login timestamp
    - return updated user

  suspendUser(id: ObjectId, reason: String) -> User | {error}
    - suspend user account
    - set isSuspended=true, suspendedAt=now, suspendedReason
    - return updated user

  unsuspendUser(id: ObjectId) -> User | {error}
    - unsuspend user account
    - set isSuspended=false, clear suspendedAt and suspendedReason
    - return updated user

  updatePreferences(id: ObjectId, preferences: Object) -> User | {error}
    - update user preferences
    - return updated user

  delete(id: ObjectId) -> {success: Boolean} | {error}
    - soft delete user account (set isActive=false)
    - return success status

queries
  _getById(id: ObjectId) -> [User]
    - return user by id

  _getByEmail(email: String) -> [User]
    - return user by email address

  _getByOrganization(organizationId: ObjectId) -> [User]
    - return all users who are members of an organization

  _getByOrganizationAndRole(organizationId: ObjectId, role: String) -> [User]
    - return users with specific role in an organization

  _getAdminUsers() -> [User]
    - return users with platformRole="admin"

  _getActiveUsers() -> [User]
    - return all active users (isActive=true, isSuspended=false)

  _getUnverifiedUsers() -> [User]
    - return users with unverified email addresses

  _getSuspendedUsers() -> [User]
    - return suspended users

  _getUsersByRole(organizationId: ObjectId, role: String) -> [User]
    - return users with specific role in organization

  _isAdmin(id: ObjectId) -> [Boolean]
    - check if user has admin privileges (platformRole="admin")

  _hasOrganizationRole(id: ObjectId, organizationId: ObjectId, role: String) -> [Boolean]
    - check if user has specific role in organization

  _canAccessOrganization(id: ObjectId, organizationId: ObjectId) -> [Boolean]
    - check if user can access organization (is member)

operational principle
  Users authenticate via email and gain access to organizations based on their memberships and roles. The platform supports multi-organization users with role-based permissions. Admins have platform-wide access while regular users operate within their organization contexts. The current organization setting provides context for user actions.
