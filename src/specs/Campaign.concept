concept Campaign

purpose
  manage education partner campaigns that connect industry projects with learning experiences

state
  Campaign
    id: ObjectId
    name: String
    description: String
    educationOrganizationId: ObjectId
    practeraExperienceId: String? // optional Practera integration
    learningObjectives: [String]
    industryConstraints: {
      allowedIndustries: [String],
      forbiddenIndustries: [String],
      preferredCompanySize: String? // "startup" | "scaleup" | "enterprise"
    }
    projectConstraints: {
      allowedDomains: [String],
      difficulty: [String], // can allow multiple difficulty levels
      maxEstimatedHours: Number?,
      requiredSkills: [String]
    }
    landingPageConfig: {
      title: String,
      subtitle: String,
      heroImage: String?,
      ctaText: String,
      customFields: [Object] // custom form fields for industry partners
    }
    status: "draft" | "active" | "paused" | "completed" | "archived"
    startDate: Date
    endDate: Date?
    participantLimit: Number?
    currentParticipants: Number
    contactEmail: String
    createdAt: Date
    updatedAt: Date

actions
  create(name: String, description: String, educationOrganizationId: ObjectId, learningObjectives: [String], startDate: Date, contactEmail: String) -> Campaign | {error}
    - create new campaign
    - validate education organization exists
    - set status to "draft", currentParticipants to 0
    - initialize default landing page config
    - return campaign with generated id and timestamps

  update(id: ObjectId, name: String?, description: String?, learningObjectives: [String]?, endDate: Date?, participantLimit: Number?, contactEmail: String?) -> Campaign | {error}
    - update existing campaign fields
    - return updated campaign

  updateConstraints(id: ObjectId, industryConstraints: Object?, projectConstraints: Object?) -> Campaign | {error}
    - update campaign constraints
    - return updated campaign

  updateLandingPage(id: ObjectId, landingPageConfig: Object) -> Campaign | {error}
    - update landing page configuration
    - return updated campaign

  updateStatus(id: ObjectId, status: String) -> Campaign | {error}
    - update campaign status
    - return updated campaign

  addParticipant(id: ObjectId) -> Campaign | {error}
    - increment currentParticipants count
    - check against participantLimit if set
    - return updated campaign

  removeParticipant(id: ObjectId) -> Campaign | {error}
    - decrement currentParticipants count
    - return updated campaign

  delete(id: ObjectId) -> {success: Boolean} | {error}
    - delete campaign if status is "draft"
    - return success status

queries
  _getById(id: ObjectId) -> [Campaign]
    - return campaign by id

  _getByOrganization(educationOrganizationId: ObjectId) -> [Campaign]
    - return campaigns for education organization

  _getByStatus(status: String) -> [Campaign]
    - return campaigns with specified status

  _getActive() -> [Campaign]
    - return active campaigns

  _getByDateRange(startDate: Date, endDate: Date) -> [Campaign]
    - return campaigns within date range

  _searchByKeywords(keywords: [String]) -> [Campaign]
    - return campaigns matching keywords in name or description

  _getLandingPageConfig(id: ObjectId) -> [Object]
    - return landing page configuration for campaign

operational principle
  Campaigns are created by education partners to connect their learning experiences with industry projects. Each campaign defines constraints that filter which projects and industry partners can participate. The campaign generates a customized landing page where industry partners can discover and engage with relevant projects. Campaigns track participation and manage the flow from industry interest to project assignment.
