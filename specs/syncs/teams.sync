<sync_spec>

sync CreateTeam
when
    API.request (method: "POST", path: "/api/teams", name: name, description: description?) : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.teams.create = true
then
    Team.create (team: teamId, name: name, description: description)

sync CreateTeamSuccess
when
    API.request (method: "POST", path: "/api/teams") : (request: request)
    Team.create (team: teamId) : (team: team)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
then
    Membership.invite (memberEntity: userId, targetEntity: teamId, roleEntity: "team_leader", invitedBy: userId)
    API.respond (request: request, status: 201, body: {team: team})

sync CreateTeamAutoAcceptMembership
when
    API.request (method: "POST", path: "/api/teams") : (request: request)
    Team.create (team: teamId) : (team: team)
    Membership.invite (memberEntity: userId, targetEntity: teamId, roleEntity: "team_leader", invitedBy: userId) : (membership: membership)
then
    Membership.accept (memberEntity: userId, targetEntity: teamId)

sync CreateTeamUnauthorized
when
    API.request (method: "POST", path: "/api/teams") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.teams.create = false
then
    API.respond (request: request, status: 403, body: {error: "Insufficient permissions to create teams"})

sync UpdateTeam
when
    API.request (method: "PUT", path: "/api/teams/:teamId", name: name?, description: description?, status: status?) : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: teamId) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.teams.update = true
then
    Team.update (team: teamId, name: name, description: description, status: status)

sync UpdateTeamSuccess
when
    API.request (method: "PUT", path: "/api/teams/:teamId") : (request: request)
    Team.update (team: teamId) : (team: team)
then
    API.respond (request: request, status: 200, body: {team: team})

sync UpdateTeamUnauthorized
when
    API.request (method: "PUT", path: "/api/teams/:teamId") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: teamId) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.teams.update = false
then
    API.respond (request: request, status: 403, body: {error: "Insufficient permissions to update team"})

sync DeleteTeam
when
    API.request (method: "DELETE", path: "/api/teams/:teamId") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: teamId) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.teams.delete = true
then
    Team.delete (team: teamId)

sync DeleteTeamSuccess
when
    API.request (method: "DELETE", path: "/api/teams/:teamId") : (request: request)
    Team.delete (team: teamId) : (success: success)
then
    API.respond (request: request, status: 200, body: {success: success})

sync JoinTeam
when
    API.request (method: "POST", path: "/api/teams/:teamId/join") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Team._getByTeam (team: teamId) : (team: team)
    team.status = "forming" or team.status = "active"
    Membership._isActiveMember (memberEntity: userId, targetEntity: teamId) : (isMember: false)
then
    Membership.invite (memberEntity: userId, targetEntity: teamId, roleEntity: "team_member", invitedBy: "system")

sync JoinTeamAutoAccept
when
    API.request (method: "POST", path: "/api/teams/:teamId/join") : (request: request)
    Membership.invite (memberEntity: userId, targetEntity: teamId, roleEntity: "team_member", invitedBy: "system") : (membership: membership)
then
    Membership.accept (memberEntity: userId, targetEntity: teamId)
    API.respond (request: request, status: 200, body: {message: "Successfully joined team"})

sync JoinTeamNotAllowed
when
    API.request (method: "POST", path: "/api/teams/:teamId/join") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Team._getByTeam (team: teamId) : (team: team)
    team.status != "forming" and team.status != "active"
then
    API.respond (request: request, status: 400, body: {error: "Team is not accepting new members"})

sync LeaveTeam
when
    API.request (method: "POST", path: "/api/teams/:teamId/leave") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Membership._isActiveMember (memberEntity: userId, targetEntity: teamId) : (isMember: true)
then
    Membership.leave (memberEntity: userId, targetEntity: teamId)

sync LeaveTeamSuccess
when
    API.request (method: "POST", path: "/api/teams/:teamId/leave") : (request: request)
    Membership.leave (memberEntity: userId, targetEntity: teamId) : (membership: membership)
then
    API.respond (request: request, status: 200, body: {message: "Successfully left team"})

sync GetTeam
when
    API.request (method: "GET", path: "/api/teams/:teamId") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.teams.read = true
    Team._getByTeam (team: teamId) : (team: team)
then
    API.respond (request: request, status: 200, body: {team: team})

sync ListTeams
when
    API.request (method: "GET", path: "/api/teams") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.teams.read = true
    Team._getByStatus (status: "active") : (teams: teams)
then
    API.respond (request: request, status: 200, body: {teams: teams})

sync GetTeamMembers
when
    API.request (method: "GET", path: "/api/teams/:teamId/members") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: teamId) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.teams.read_members = true
    Membership._getActiveByTarget (targetEntity: teamId) : (memberships: memberships)
then
    API.respond (request: request, status: 200, body: {members: memberships})

sync AddTeamMember
when
    API.request (method: "POST", path: "/api/teams/:teamId/members", memberEntity: memberEntity, roleEntity: roleEntity) : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: teamId) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.teams.manage_members = true
then
    Membership.invite (memberEntity: memberEntity, targetEntity: teamId, roleEntity: roleEntity, invitedBy: userId)

sync RemoveTeamMember
when
    API.request (method: "DELETE", path: "/api/teams/:teamId/members/:memberEntity") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: teamId) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.teams.manage_members = true
then
    Membership.suspend (memberEntity: memberEntity, targetEntity: teamId)

</sync_spec>