<sync_spec>

sync CreateProject
when
    API.request (method: "POST", path: "/api/projects", title: title, description: description, scope: scope, learningObjectives: learningObjectives, industry: industry, domain: domain, difficulty: difficulty, estimatedHours: estimatedHours, requiredSkills: requiredSkills, deliverables: deliverables) : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.projects.create = true
then
    Project.create (project: projectId, title: title, description: description, scope: scope, learningObjectives: learningObjectives, industry: industry, domain: domain, difficulty: difficulty, estimatedHours: estimatedHours, requiredSkills: requiredSkills, deliverables: deliverables)

sync CreateProjectSuccess
when
    API.request (method: "POST", path: "/api/projects") : (request: request)
    Project.create (project: projectId) : (project: project)
then
    API.respond (request: request, status: 201, body: {project: project})

sync CreateProjectUnauthorized
when
    API.request (method: "POST", path: "/api/projects") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.projects.create = false
then
    API.respond (request: request, status: 403, body: {error: "Insufficient permissions to create projects"})

sync GenerateProjectWithAI
when
    API.request (method: "POST", path: "/api/projects/generate", industry: industry, domain: domain, learningObjectives: learningObjectives, difficulty: difficulty, estimatedHours: estimatedHours, sourceData: sourceData) : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.projects.ai_generate = true
then
    Project.generateWithAI (project: projectId, industry: industry, domain: domain, learningObjectives: learningObjectives, difficulty: difficulty, estimatedHours: estimatedHours, sourceData: sourceData)

sync UpdateProject
when
    API.request (method: "PUT", path: "/api/projects/:projectId", title: title?, description: description?, scope: scope?, learningObjectives: learningObjectives?, difficulty: difficulty?, estimatedHours: estimatedHours?, requiredSkills: requiredSkills?, deliverables: deliverables?, tags: tags?) : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.projects.update = true
then
    Project.update (project: projectId, title: title, description: description, scope: scope, learningObjectives: learningObjectives, difficulty: difficulty, estimatedHours: estimatedHours, requiredSkills: requiredSkills, deliverables: deliverables, tags: tags)

sync UpdateProjectSuccess
when
    API.request (method: "PUT", path: "/api/projects/:projectId") : (request: request)
    Project.update (project: projectId) : (project: project)
then
    API.respond (request: request, status: 200, body: {project: project})

sync PublishProject
when
    API.request (method: "POST", path: "/api/projects/:projectId/publish") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.projects.publish = true
then
    Project.publish (project: projectId)

sync ArchiveProject
when
    API.request (method: "POST", path: "/api/projects/:projectId/archive") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.projects.archive = true
then
    Project.archive (project: projectId)

sync DeleteProject
when
    API.request (method: "DELETE", path: "/api/projects/:projectId") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.projects.delete = true
then
    Project.delete (project: projectId)

sync GetProject
when
    API.request (method: "GET", path: "/api/projects/:projectId") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.projects.read = true
    Project._getByProject (project: projectId) : (project: project)
then
    API.respond (request: request, status: 200, body: {project: project})

sync ListProjects
when
    API.request (method: "GET", path: "/api/projects") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.projects.read = true
    Project._getByStatus (status: "published") : (projects: projects)
then
    API.respond (request: request, status: 200, body: {projects: projects})

sync SearchProjects
when
    API.request (method: "GET", path: "/api/projects/search", keywords: keywords) : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.projects.read = true
    Project._searchByKeywords (keywords: keywords) : (projects: projects)
then
    API.respond (request: request, status: 200, body: {projects: projects})

sync GetProjectsByIndustry
when
    API.request (method: "GET", path: "/api/projects/industry/:industry") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.projects.read = true
    Project._getByIndustry (industry: industry) : (projects: projects)
then
    API.respond (request: request, status: 200, body: {projects: projects})

</sync_spec>