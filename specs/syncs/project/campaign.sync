<sync_spec>

sync CreateCampaign
when
    API.request (method: "POST", path: "/api/campaigns", name: name, description: description, learningObjectives: learningObjectives, startDate: startDate, contactEmail: contactEmail) : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.campaigns.create = true
then
    Campaign.create (campaign: campaignId, name: name, description: description, learningObjectives: learningObjectives, startDate: startDate, contactEmail: contactEmail)

sync CreateCampaignSuccess
when
    API.request (method: "POST", path: "/api/campaigns") : (request: request)
    Campaign.create (campaign: campaignId) : (campaign: campaign)
then
    API.respond (request: request, status: 201, body: {campaign: campaign})

sync CreateCampaignUnauthorized
when
    API.request (method: "POST", path: "/api/campaigns") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.campaigns.create = false
then
    API.respond (request: request, status: 403, body: {error: "Insufficient permissions to create campaigns"})

sync UpdateCampaign
when
    API.request (method: "PUT", path: "/api/campaigns/:campaignId", name: name?, description: description?, learningObjectives: learningObjectives?, endDate: endDate?, maxParticipants: maxParticipants?, contactEmail: contactEmail?) : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.campaigns.update = true
then
    Campaign.update (campaign: campaignId, name: name, description: description, learningObjectives: learningObjectives, endDate: endDate, maxParticipants: maxParticipants, contactEmail: contactEmail)

sync UpdateCampaignSuccess
when
    API.request (method: "PUT", path: "/api/campaigns/:campaignId") : (request: request)
    Campaign.update (campaign: campaignId) : (campaign: campaign)
then
    API.respond (request: request, status: 200, body: {campaign: campaign})

sync UpdateCampaignConstraints
when
    API.request (method: "PUT", path: "/api/campaigns/:campaignId/constraints", industryConstraints: industryConstraints?, projectConstraints: projectConstraints?) : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.campaigns.update = true
then
    Campaign.updateConstraints (campaign: campaignId, industryConstraints: industryConstraints, projectConstraints: projectConstraints)

sync UpdateCampaignLandingPage
when
    API.request (method: "PUT", path: "/api/campaigns/:campaignId/landing-page", landingPageConfig: landingPageConfig) : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.campaigns.update = true
then
    Campaign.updateLandingPage (campaign: campaignId, landingPageConfig: landingPageConfig)

sync UpdateCampaignStatus
when
    API.request (method: "PUT", path: "/api/campaigns/:campaignId/status", status: status) : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.campaigns.publish = true
then
    Campaign.updateStatus (campaign: campaignId, status: status)

sync DeleteCampaign
when
    API.request (method: "DELETE", path: "/api/campaigns/:campaignId") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.campaigns.delete = true
then
    Campaign.delete (campaign: campaignId)

sync DeleteCampaignSuccess
when
    API.request (method: "DELETE", path: "/api/campaigns/:campaignId") : (request: request)
    Campaign.delete (campaign: campaignId) : (success: success)
then
    API.respond (request: request, status: 200, body: {success: success})

sync GetCampaign
when
    API.request (method: "GET", path: "/api/campaigns/:campaignId") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.campaigns.read = true
    Campaign._getByCampaign (campaign: campaignId) : (campaign: campaign)
then
    API.respond (request: request, status: 200, body: {campaign: campaign})

sync GetCampaignPublic
when
    API.request (method: "GET", path: "/api/campaigns/:campaignId/public") : (request: request)
where
    Campaign._getByCampaign (campaign: campaignId) : (campaign: campaign)
    campaign.status = "active"
    Campaign._getLandingPageConfig (campaign: campaignId) : (landingPageConfig: landingPageConfig)
then
    API.respond (request: request, status: 200, body: {campaign: campaign, landingPageConfig: landingPageConfig})

sync ListCampaigns
when
    API.request (method: "GET", path: "/api/campaigns") : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.campaigns.read = true
    Campaign._getActive () : (campaigns: campaigns)
then
    API.respond (request: request, status: 200, body: {campaigns: campaigns})

sync SearchCampaigns
when
    API.request (method: "GET", path: "/api/campaigns/search", keywords: keywords) : (request: request)
where
    API._getCurrentUser (request: request) : (userId: userId)
    Session._getCurrentContext (sessionKey: request.sessionId) : (context: context)
    Membership._getByMemberAndTarget (memberEntity: userId, targetEntity: context) : (membership: membership)
    Role._getByName (name: membership.roleEntity) : (userRole: userRole)
    userRole.permissions.campaigns.read = true
    Campaign._searchByKeywords (keywords: keywords) : (campaigns: campaigns)
then
    API.respond (request: request, status: 200, body: {campaigns: campaigns})

</sync_spec>