<sync_spec>

sync UserLogin
when
    API.request (method: "POST", path: "/api/auth/login", email: email, password: password) : (request: request)
then
    User.updateLastLogin (user: userIdentifier)
    Session.create (sessionKey: sessionKey, loginMethod: "email")

sync UserLoginSuccess
when
    API.request (method: "POST", path: "/api/auth/login") : (request: request)
    User.updateLastLogin (user: userIdentifier) : (user: user)
    Session.create (sessionKey: sessionKey, loginMethod: "email") : (session: session)
where
    User._getByEmail (email: email) : (user: userDetails)
    userDetails exists and userDetails.isActive = true and userDetails.isSuspended = false
then
    Session.setContext (sessionKey: sessionKey, context: defaultContext)
    API.respond (request: request, status: 200, body: {user: userDetails, session: session})

sync UserLoginFailure  
when
    API.request (method: "POST", path: "/api/auth/login", email: email) : (request: request)
    User.updateLastLogin (user: userIdentifier) : (error: error)
where
    User._getByEmail (email: email) : (user: userDetails)
    userDetails not exists or userDetails.isActive = false or userDetails.isSuspended = true
then
    API.respond (request: request, status: 401, body: {error: "Invalid credentials or account inactive"})

sync SessionActivity
when
    API.request (sessionId: sessionId) : (request: request)
where
    Session._isActiveSession (sessionKey: sessionId) : (isActive: true)
then
    Session.updateActivity (sessionKey: sessionId)

sync SessionExpired
when
    API.request (sessionId: sessionId) : (request: request)
where
    Session._isActiveSession (sessionKey: sessionId) : (isActive: false)
then
    API.respond (request: request, status: 401, body: {error: "Session expired"})

sync UserLogout
when
    API.request (method: "POST", path: "/api/auth/logout", sessionId: sessionId) : (request: request)
where
    Session._getActive (sessionKey: sessionId) : (session: session)
then
    Session.expire (sessionKey: sessionId)
    API.respond (request: request, status: 200, body: {message: "Logged out successfully"})

sync UserRegistration
when
    API.request (method: "POST", path: "/api/auth/register", email: email, name: name, user: userIdentifier) : (request: request)
then
    User.register (user: userIdentifier, email: email, name: name)

sync UserRegistrationSuccess
when
    API.request (method: "POST", path: "/api/auth/register") : (request: request)
    User.register (user: userIdentifier, email: email, name: name) : (user: user)
then
    API.respond (request: request, status: 201, body: {user: user, message: "User registered successfully"})

sync UserRegistrationFailure
when
    API.request (method: "POST", path: "/api/auth/register") : (request: request)
    User.register (user: userIdentifier, email: email, name: name) : (error: error)
then
    API.respond (request: request, status: 400, body: {error: error})

sync EmailVerification
when
    API.request (method: "POST", path: "/api/auth/verify-email", user: userIdentifier) : (request: request)
then
    User.verifyEmail (user: userIdentifier)

sync EmailVerificationResponse
when
    API.request (method: "POST", path: "/api/auth/verify-email") : (request: request)
    User.verifyEmail (user: userIdentifier) : (user: user)
then
    API.respond (request: request, status: 200, body: {user: user, message: "Email verified successfully"})

sync SwitchContext
when
    API.request (method: "POST", path: "/api/auth/switch-context", sessionId: sessionId, context: newContext) : (request: request)
where
    Session._getActive (sessionKey: sessionId) : (session: session)
    Membership._isActiveMember (memberEntity: session.userId, targetEntity: newContext) : (isMember: true)
then
    Session.setContext (sessionKey: sessionId, context: newContext)
    API.respond (request: request, status: 200, body: {context: newContext})

sync SwitchContextUnauthorized
when
    API.request (method: "POST", path: "/api/auth/switch-context", sessionId: sessionId, context: newContext) : (request: request)
where
    Session._getActive (sessionKey: sessionId) : (session: session)
    Membership._isActiveMember (memberEntity: session.userId, targetEntity: newContext) : (isMember: false)
then
    API.respond (request: request, status: 403, body: {error: "Access denied to context"})

</sync_spec>