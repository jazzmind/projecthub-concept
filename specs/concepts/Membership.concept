<concept_spec>

concept Membership

purpose
  manage associations between entities with roles and workflow states

state
  a set of Memberships with
    a memberEntity String
    a targetEntity String
    a roleEntity String
    an isActive Flag
    a joinedAt Date
    an optional leftAt Date
    an optional invitedBy String
    an optional invitedAt Date
    an optional approvedBy String
    an optional approvedAt Date
    a status String
    an optional invitationMessage String
    a createdAt Date
    an updatedAt Date

actions
  invite(memberEntity: String, targetEntity: String, roleEntity: String, invitedBy: String, message: String?) -> Membership | {error}
    - create membership invitation
    - set status to "invited"
    - return membership with generated id and timestamps

  accept(memberEntity: String, targetEntity: String) -> Membership | {error}
    - entity accepts invitation
    - set status to "active", isActive=true, joinedAt=now
    - return updated membership

  reject(memberEntity: String, targetEntity: String) -> Membership | {error}
    - entity rejects invitation
    - set status to "left", leftAt=now
    - return updated membership

  approve(memberEntity: String, targetEntity: String, approvedBy: String) -> Membership | {error}
    - approve pending membership
    - set status to "active", isActive=true, approvedBy, approvedAt=now, joinedAt=now
    - return updated membership

  suspend(memberEntity: String, targetEntity: String) -> Membership | {error}
    - suspend membership
    - set status to "suspended", isActive=false
    - return updated membership

  reactivate(memberEntity: String, targetEntity: String) -> Membership | {error}
    - reactivate suspended membership
    - set status to "active", isActive=true
    - return updated membership

  leave(memberEntity: String, targetEntity: String) -> Membership | {error}
    - entity leaves
    - set status to "left", isActive=false, leftAt=now
    - return updated membership

  updateRole(memberEntity: String, targetEntity: String, roleEntity: String) -> Membership | {error}
    - change role in membership
    - return updated membership

  delete(memberEntity: String, targetEntity: String) -> {success: Boolean} | {error}
    - delete membership record
    - only allowed for inactive memberships
    - return success status

queries
  _getByMember(memberEntity: String) -> [Membership]
    - return all memberships for member entity

  _getByTarget(targetEntity: String) -> [Membership]
    - return all memberships for target entity

  _getByMemberAndTarget(memberEntity: String, targetEntity: String) -> [Membership]
    - return membership for specific member-target pair

  _getActiveByMember(memberEntity: String) -> [Membership]
    - return active memberships for member entity

  _getActiveByTarget(targetEntity: String) -> [Membership]
    - return active memberships for target entity

  _getByRole(roleEntity: String) -> [Membership]
    - return memberships with specific role

  _getByStatus(status: String) -> [Membership]
    - return memberships with specific status

  _getPendingInvitations(memberEntity: String) -> [Membership]
    - return pending invitations for member entity

  _isActiveMember(memberEntity: String, targetEntity: String) -> [Boolean]
    - check if entity is active member of target

  _hasRole(memberEntity: String, targetEntity: String, roleEntity: String) -> [Boolean]
    - check if entity has specific role in target

operational principle
  Memberships connect entities through roles with workflow states. After invite(member: "user1", target: "org1", role: "admin", invitedBy: "system") and accept(member: "user1", target: "org1"), then _isActiveMember(member: "user1", target: "org1") returns true.

</concept_spec>