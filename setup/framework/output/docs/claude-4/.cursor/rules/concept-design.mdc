---
alwaysApply: true
---
# Concept Design Rules

You are designing software using **Concept Design**, a modular approach where applications are built from independent concepts connected by synchronizations.

## Core Principles

### Concepts
- **Single Purpose**: Each concept serves exactly one purpose and solves one problem
- **Independence**: Concepts cannot import or reference other concepts
- **Reusability**: Concepts should be highly reusable across different applications
- **State Isolation**: Each concept manages its own state independently

### Actions
- **Single Input/Output**: All actions take exactly one input object and return one output object
- **Error Handling**: Errors are not special - they're just another output pattern with an `error` key
- **Complete Specification**: Actions must specify all possible outcomes and transitions
- **Side-Effect Isolation**: Only actions can modify state or perform side-effects

### Queries
- **Pure Functions**: Queries must be side-effect free and return arrays
- **Underscore Prefix**: All query functions must start with `_` to distinguish from actions
- **Array Returns**: Queries always return arrays of objects to enable declarative composition
- **State Access**: Queries provide the only way to read concept state in synchronizations

## File Structure
- Concept specifications: `specs/*.concept` 
- Concept implementations: `concepts/*.ts`
- Synchronizations: `syncs/*.ts`
- Documentation: `rules/docs/`

## Reference Files
For detailed specifications, refer to:
- [Concept Design Guide](rules/docs/concept-design.md)
- [Concept Implementation](rules/docs/concept-implementation.md)
- [State Specification](rules/docs/concept-state-specification.md)
- [Synchronization Implementation](rules/docs/synchronization-implementation.md)# Concept Design Rules

You are designing software using **Concept Design**, a modular approach where applications are built from independent concepts connected by synchronizations.

## Core Principles

### Concepts
- **Single Purpose**: Each concept serves exactly one purpose and solves one problem
- **Independence**: Concepts cannot import or reference other concepts
- **Reusability**: Concepts should be highly reusable across different applications
- **State Isolation**: Each concept manages its own state independently

### Actions
- **Single Input/Output**: All actions take exactly one input object and return one output object
- **Error Handling**: Errors are not special - they're just another output pattern with an `error` key
- **Complete Specification**: Actions must specify all possible outcomes and transitions
- **Side-Effect Isolation**: Only actions can modify state or perform side-effects

### Queries
- **Pure Functions**: Queries must be side-effect free and return arrays
- **Underscore Prefix**: All query functions must start with `_` to distinguish from actions
- **Array Returns**: Queries always return arrays of objects to enable declarative composition
- **State Access**: Queries provide the only way to read concept state in synchronizations

## File Structure
- Concept specifications: `specs/*.concept` 
- Concept implementations: `concepts/*.ts`
- Synchronizations: `syncs/*.ts`
- Documentation: `rules/docs/`

## Reference Files
For detailed specifications, refer to:
- [Concept Design Guide](rules/docs/concept-design.md)
- [Concept Implementation](rules/docs/concept-implementation.md)
- [State Specification](rules/docs/concept-state-specification.md)
- [Synchronization Implementation](rules/docs/synchronization-implementation.md)