---
alwaysApply: true
---

# Project-Specific Rules

## User-Defined Rules
Following these critical user-defined rules that must be strictly observed:

### Database Operations
- **NEVER run `npx prisma db push --force-reset`** - This flag will terminate the process
- **Use `npx prisma db push`** for schema updates (without --force-reset)
- When updating DB schema, ignore linter errors initially as they take time to catch up

### Development Server
- **Check for existing dev servers** before starting new ones
- **Use `npm run api`** instead of `npm run dev` for API endpoint testing (enables auth bypass)
- **Kill existing dev servers** before running `npm run dev` or `npm run build`

### AI and Testing Standards  
- **Never mock AI calls** - Always use real AI integrations
- **Never create fake/mock data** unless explicitly requested
- **No premature celebration** - Don't claim "production ready" or "100% functionality"
- **Don't claim integration tests work** if they only handle mock data

### Communication Style
- **No celebration language** - Avoid "mission accomplished" type statements
- **No production claims** - Don't say you have a "production system"
- **Focus on functionality** - Describe what actually works, not aspirational claims

## Development Environment
- **Operating System**: macOS (darwin 24.5.0)
- **Shell**: /bin/zsh  
- **Node Version**: 18+ required
- **Runtime**: Node.js preferred for simplified imports
- **Database**: Prisma with TypeScript driver

## Code Quality
- **TypeScript Strict**: Always use strict type checking
- **Error Handling**: Return structured error objects, don't throw exceptions
- **Imports**: Prefer generic names without version numbers in Deno
- **Environment Variables**: All configuration via environment variables

## Testing Protocol
- **API Testing**: Use `npm run api` for testing API endpoints
- **Real Data**: Always use real integrations, never mocks unless requested
- **Incremental Testing**: Test concepts individually before integration
- **Flow Validation**: Use engine TRACE logging to verify sync execution

## File Management
- **Prefer Editing**: Always prefer editing existing files over creating new ones
- **No Auto-Documentation**: Never proactively create .md or README files
- **Path Preference**: Use absolute paths over relative paths when possible

## Learning and Adaptation
- **Document New Patterns**: When learning something new, consider creating or updating rules
- **Rule Evolution**: Update project rules based on discoveries and user feedback
- **Context Awareness**: Always reference which rules are being applied

## Reference Context
These rules supplement the concept design framework rules and should be considered alongside:
- Concept design principles
- Next.js integration patterns  
- TypeScript implementation standards
- Synchronization development workflow